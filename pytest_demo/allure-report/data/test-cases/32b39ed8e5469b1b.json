{
  "uid" : "32b39ed8e5469b1b",
  "name" : "test_mul[failed]",
  "fullName" : "test_case.test_calc.TestCalc#test_mul",
  "historyId" : "0e1a9869335d72aa077aba74e2e032f8",
  "time" : {
    "start" : 1611939567016,
    "stop" : 1611939567019,
    "duration" : 3
  },
  "description" : "\n        乘法用例\n        :param get_calc: 实例化乘法\n        :param get_mul_data: 测试数据\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    乘法用例\n    :param get_calc: 实例化乘法\n    :param get_mul_data: 测试数据\n    :return:\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert -0.01 == 0.01",
  "statusTrace" : "self = <pytest_demo.test_case.test_calc.TestCalc object at 0x0000011BE2092A90>, get_calc = <pytest_demo.page_code.calculator.CalcuLater object at 0x0000011BE2099AC0>\nget_mul_data = [0.1, -0.1, 0.01]\n\n    @allure.story(\"测试乘法\")\n    @pytest.mark.run(order=3)\n    def test_mul(self, get_calc, get_mul_data):\n        \"\"\"\n        乘法用例\n        :param get_calc: 实例化乘法\n        :param get_mul_data: 测试数据\n        :return:\n        \"\"\"\n        with allure.step(\"计算两个数的乘法积\"):\n            result = get_calc.mul(get_mul_data[0], get_mul_data[1])\n        if isinstance(result, float):\n            result = round(result, 2)\n>       assert result == get_mul_data[2]\nE       assert -0.01 == 0.01\n\ntest_case\\test_calc.py:75: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "get_calc",
    "time" : {
      "start" : 1611939566309,
      "stop" : 1611939566311,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "get_mul_data",
    "time" : {
      "start" : 1611939567014,
      "stop" : 1611939567015,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n        乘法用例\n        :param get_calc: 实例化乘法\n        :param get_mul_data: 测试数据\n        :return:\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert -0.01 == 0.01",
    "statusTrace" : "self = <pytest_demo.test_case.test_calc.TestCalc object at 0x0000011BE2092A90>, get_calc = <pytest_demo.page_code.calculator.CalcuLater object at 0x0000011BE2099AC0>\nget_mul_data = [0.1, -0.1, 0.01]\n\n    @allure.story(\"测试乘法\")\n    @pytest.mark.run(order=3)\n    def test_mul(self, get_calc, get_mul_data):\n        \"\"\"\n        乘法用例\n        :param get_calc: 实例化乘法\n        :param get_mul_data: 测试数据\n        :return:\n        \"\"\"\n        with allure.step(\"计算两个数的乘法积\"):\n            result = get_calc.mul(get_mul_data[0], get_mul_data[1])\n        if isinstance(result, float):\n            result = round(result, 2)\n>       assert result == get_mul_data[2]\nE       assert -0.01 == 0.01\n\ntest_case\\test_calc.py:75: AssertionError",
    "steps" : [ {
      "name" : "计算两个数的乘法积",
      "time" : {
        "start" : 1611939567017,
        "stop" : 1611939567018,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "6b9749ae055d7dca",
      "name" : "log",
      "source" : "6b9749ae055d7dca.txt",
      "type" : "text/plain",
      "size" : 322
    }, {
      "uid" : "310f66ce457f7afd",
      "name" : "stderr",
      "source" : "310f66ce457f7afd.txt",
      "type" : "text/plain",
      "size" : 421
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "get_mul_data::0",
    "time" : {
      "start" : 1611939567045,
      "stop" : 1611939567045,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "测试乘法"
  }, {
    "name" : "feature",
    "value" : "测试计算器"
  }, {
    "name" : "tag",
    "value" : "run(order=3)"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_calc"
  }, {
    "name" : "subSuite",
    "value" : "TestCalc"
  }, {
    "name" : "host",
    "value" : "LAPTOP-NE3SM1A3"
  }, {
    "name" : "thread",
    "value" : "7140-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_calc"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "get_mul_data",
    "value" : "[0.1, -0.1, 0.01]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=3)" ]
  },
  "source" : "32b39ed8e5469b1b.json",
  "parameterValues" : [ "[0.1, -0.1, 0.01]" ]
}